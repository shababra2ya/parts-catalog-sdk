/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
	'/ip/': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/** Get user ip */
		get: operations['getIp'];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/catalogs/': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/** Get available catalogs */
		get: operations['getCatalogs'];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/catalogs/{catalogId}/models/': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/** Get catalog car models */
		get: operations['getModels'];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/catalogs/{catalogId}/cars2/': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * Get car list of catalog
		 * @description Attention! Vehicle identifier may change over time.
		 */
		get: operations['getCars2'];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/catalogs/{catalogId}/cars2/{carId}': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * GET catalog car by id
		 * @description Attention! Vehicle identifier may change over time.
		 */
		get: operations['getCarsById2'];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/catalogs/{catalogId}/cars-parameters/': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/** Get cars filters of selected catalog */
		get: operations['getCarsParameters'];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/catalogs/{catalogId}/groups2/': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * Get catalog groups
		 * @description With empty identifier shows main groups of catalog. It is necessary to select groups by ID until the "hasParts" value is true. The "hasParts" value indicates that the group contains spare parts. The list of spare parts can be received by the method parts2.
		 */
		get: operations['getGroups'];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/car/info': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * Get car info by VIN or FRAME
		 * @description You may specify VIN or FRAME number in query. Attention! Vehicle identifier may change over time.
		 */
		get: operations['getCarInfo'];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/catalogs/{catalogId}/parts2': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * Get catalog parts.
		 * @description Get catalog parts. In case you receive IDs of groups with the value "hasParts=false", you get error 400 (No details found with specified parameters).
		 */
		get: operations['getParts2'];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/catalogs/{catalogId}/groups-suggest': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * Get group suggest.
		 * @description Suggest parts with relative to group id
		 */
		get: operations['getGroupsSuggest'];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/catalogs/{catalogId}/groups-by-sid': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * Get groups by search id.
		 * @deprecated
		 * @description Get groups by search id
		 */
		get: operations['getGroupsBySid'];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/example/prices': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * Get prices of part
		 * @description This endpoint is a demonstration example showing how to retrieve information about prices and availability of parts by unique product code and brand. It is intended for developers and API architects as an illustration of potential functionality, not as a ready-to-use solution for production environments.
		 *
		 */
		get: operations['getExamplePrices'];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/catalogs/{catalogId}/groups-tree': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/** @description Get groups tree */
		get: operations['Get groups tree'];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/catalogs/{catalogId}/schemas': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/** @description Get schemas that lead to detail pages. */
		get: operations['Get schemas'];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
}
export type webhooks = Record<string, never>;
export interface components {
	schemas: {
		Ip: {
			/** @description ip value */
			ip?: string;
		};
		CarParameterInfo: {
			key?: string;
			name?: string;
			values?: {
				idx?: components['schemas']['CarParameterIdx'];
				value?: string;
			}[];
			/** @description You can sort the parameters in the external interface in the sort order  from minimum to maximum. The smaller the sortOrder, the higher the priority of the parameter. */
			sortOrder?: number;
		};
		/** @description Index of car parameter (idx) */
		CarParameterIdx: string;
		/** @description Parts description */
		Parts: {
			/** @description URL of full-size parts group image */
			img: string;
			/** @description Parts group description */
			imgDescription?: string;
			/** @description Parts group list */
			partGroups: components['schemas']['PartsGroup'][];
			/** @description Positions of blocks with a number on image */
			positions?: {
				/** @description Number on image */
				number?: string;
				/** @description Coordinate data<br /> X - horizontal coordinate relative to the upper left of the full-size image, in pixels<br /> Y - vertical coordinate relative to the upper left of the full-size image, in pixels<br /> H - height of block with a part number on the full-size image, in pixels<br /> W - width of block with a part number on the full-size image, in pixels */
				coordinates?: number[];
			}[];
		};
		/** @description Parts group */
		PartsGroup: {
			/** @description Part name */
			name?: string;
			/** @description Parts group number */
			number?: string;
			/** @description Parts group position number on image */
			positionNumber?: string;
			/** @description Parts group description. Installation notes, applicability. Description of the part or group of parts. */
			description?: string;
			/** @description Group detail list */
			parts: components['schemas']['Part'][];
		};
		/** @description Group */
		Group: {
			/** @description Group id */
			id: string;
			/** @description Parent id. Can be `null` if there is no parent */
			parentId?: string;
			/** @description Indicates that the group has subgroups */
			hasSubgroups?: boolean;
			/** @description Indicates that the group has parts */
			hasParts?: boolean;
			/** @description Group name */
			name: string;
			/** @description Group image */
			img?: string;
			/** @description Group description */
			description?: string;
		};
		/** @description Car */
		Car2: {
			/** @description Is a car identifier in the Parts-Catalogs system;
			 *     this parameter is not constant and can change when updating catalogs */
			id: string;
			/** @description Catalog id */
			catalogId: string;
			/** @description Car name */
			name: string;
			/** @description Car description */
			description?: string;
			/**
			 * @description Car model id
			 * @example d3190764f126fabbf56bf3e36efbd56a
			 */
			modelId?: string;
			/** @description Car model name */
			modelName?: string;
			/** @description Model image URL */
			modelImg?: string;
			/** @description Car vin */
			vin?: string;
			/** @description Car frame */
			frame?: string;
			/** @description Criteria is a parameter, which contains info by VIN taken from the "car/info" method;
			 *     this parameter is used to filter groups and parts for a specified VIN */
			criteria?: string;
			/** @description Car brand */
			brand?: string;
			/** @description Groups tree method availability flag */
			groupsTreeAvailable?: boolean;
			/** @description Car parameters */
			parameters?: {
				/** @description hash id of car param */
				idx?: string;
				key?: string;
				name?: string;
				value?: string;
				/** @description You can sort the parameters in the external interface in the sort order  from minimum to maximum. The smaller the sortOrder, the higher the priority of the parameter. */
				sortOrder?: number;
			}[];
		};
		/**
		 * Car filter
		 * @description The values of the specific complectation parameter
		 */
		CarFilterValues: {
			/** @description Parameter name */
			name?: {
				/** @description Parameter id */
				id?: string;
				/** @description Inner key of parameter */
				key?: string;
				/** @description Parameter text */
				text?: string;
			};
			/** @description Parameter value */
			values?: {
				/** @description Parameter value id */
				id?: string;
				/** @description Parameter value text */
				text?: string;
			}[];
		};
		/**
		 * Models
		 * @description Car model
		 */
		Model: {
			/** @description Model id */
			id: string;
			/** @description Model name */
			name: string;
			/** @description Model image URL */
			img?: string;
		};
		/** Catalog */
		Catalog: {
			/** @description Catalog id */
			id: string;
			/** @description Catalog name */
			name: string;
			modelsCount: number;
		};
		/**
		 * Error
		 * @description Error response to request
		 */
		Error: {
			/**
			 * Format: int32
			 * @description Response code
			 */
			code: number;
			/** @description Error code */
			errorCode?: string;
			/** @description Text message */
			message: string;
		};
		CarInfo: {
			title?: string;
			/** @description Catalog id */
			catalogId?: string;
			/** @description Car brand */
			brand?: string;
			/**
			 * @description Car model id
			 * @example 5bb58a3cab059a189ef92be181380fd5
			 */
			modelId?: string;
			/** @description Car id */
			carId?: string;
			/** @description Additional criterias to search in groups, subgroups and parts */
			criteria?: string;
			/** @description Car vin */
			vin?: string;
			/** @description Car frame */
			frame?: string;
			/** @description Car model name */
			modelName?: string;
			/** @description Car description */
			description?: string;
			/** @description Groups tree method availability flag */
			groupsTreeAvailable?: boolean;
			/** @description Car option codes */
			optionCodes?: {
				code?: string;
				description?: string;
			}[];
			/** @description Car parameters */
			parameters?: {
				/** @description hash id of car param */
				idx?: string;
				key?: string;
				name?: string;
				value?: string;
				/** @description You can sort the parameters in the external interface in the sort order  from minimum to maximum. The smaller the sortOrder, the higher the priority of the parameter. */
				sortOrder?: number;
			}[];
		};
		/** @description Part */
		Part: {
			/** @description Part id */
			id?: string;
			/** @description Name id */
			nameId?: string | null;
			/** @description Name */
			name?: string;
			/** @description Part number */
			number?: string;
			/** @description Short note.
			 *     It can has url for go to sections in gui.
			 *     To get url in this field, you must send header with template for your gui url. */
			notice?: string;
			/** @description Part description. Installation notes, applicability. Replacements. Description and characteristics of the part.
			 *     It can has url for go to sections in gui.
			 *     To get url in this field, you must send header with template for your gui url. */
			description?: string;
			/** @description Position number on image group */
			positionNumber?: string;
			/** @description Search results URL */
			url?: string;
		};
		/** @description suggest */
		Suggest: {
			/**
			 * @description search id
			 * @example 12345
			 */
			sid?: string;
			/**
			 * @description Name
			 * @example battery
			 */
			name?: string;
			catalogId?: string;
			modelId?: string;
			carId?: string;
		};
		ExamplePricesResponse: {
			id?: string;
			title?: string;
			code?: string;
			brand?: string;
			price?: string;
			basketQty?: string;
			inStockQty?: string;
			rating?: string;
			delivery?: string;
			payload?: {
				[key: string]: string;
			};
		};
		SchemasResponse: {
			group?: components['schemas']['Group'] | null;
			list?: components['schemas']['Schema'][];
		};
		Schema: {
			/** @example IzLwn5qAMDA08J-agTg0RTQyOULwn5SwMjI18J-QkjU4NfCfkIk4NEU0MjlC */
			groupId?: string;
			/** @example //img.parts-catalogs.com/toyota_2022_12/usa/84E429B.png */
			img?: string | null;
			/** @example ENGINE & TRANSMISSION ILLUST NO. 1 OF 7 */
			name?: string;
			/** @example  */
			description?: string | null;
			partNames?: components['schemas']['PartName'][];
		};
		PartName: {
			id?: string;
			name?: string;
		};
		GroupsTreeResponse: {
			id?: string;
			name?: string;
			parentId?: string | null;
			catalogId?: string;
			modelId?: string;
			carId?: string;
			subGroups?: components['schemas']['GroupsTree'][];
		};
		GroupsTree: {
			id?: string;
			name?: string;
			parentId?: string | null;
			catalogId?: string;
			modelId?: string;
			carId?: string;
			/** @example [] */
			subGroups?: {
				id?: string;
				name?: string;
				parentId?: string | null;
				catalogId?: string;
				modelId?: string;
				carId?: string;
			}[];
		};
	};
	responses: {
		/** @description Access deny */
		accessDeny: {
			headers: {
				'X-Request-Id'?: string;
			};
			content: {
				'application/json': components['schemas']['Error'];
			};
		};
		/** @description Unprocessable Entity */
		parameterMissing: {
			headers: {
				'X-Request-Id'?: string;
			};
			content: {
				'application/json': components['schemas']['Error'];
			};
		};
		/** @description Not Found */
		notFound: {
			headers: {
				'X-Request-Id'?: string;
			};
			content: {
				'application/json': components['schemas']['Error'];
			};
		};
		/** @description Bad Request */
		badRequest: {
			headers: {
				'X-Request-Id'?: string;
			};
			content: {
				'application/json': components['schemas']['Error'];
			};
		};
	};
	parameters: {
		/** @description Language of return data */
		AcceptLanguage: 'en' | 'ru' | 'de' | 'bg' | 'fr' | 'es' | 'he';
		/** @description Template for your gui url.
		 *     In template must be 2 templates separated by commas for go to group list and parts list.
		 *     If vin is not used, then you do not need to pass criteria and vin to the template. */
		XRedirectTemplate: string;
	};
	requestBodies: never;
	headers: never;
	pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
	getIp: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Id */
			200: {
				headers: {
					'X-Request-Id'?: string;
				};
				content: {
					'application/json': components['schemas']['Ip'];
				};
			};
		};
	};
	getCatalogs: {
		parameters: {
			query?: never;
			header?: {
				/** @description Language of return data */
				'Accept-Language'?: components['parameters']['AcceptLanguage'];
			};
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Ok */
			200: {
				headers: {
					'X-Request-Id'?: string;
				};
				content: {
					'application/json': components['schemas']['Catalog'][];
				};
			};
		};
	};
	getModels: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description Catalog id */
				catalogId: string;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Model list */
			200: {
				headers: {
					'X-Request-Id'?: string;
				};
				content: {
					'application/json': components['schemas']['Model'][];
				};
			};
			400: components['responses']['badRequest'];
			403: components['responses']['accessDeny'];
			404: components['responses']['notFound'];
		};
	};
	getCars2: {
		parameters: {
			query: {
				/** @description Model id */
				modelId: string;
				/** @description Filter cars by car parameter indexes (idx) */
				parameter?: components['schemas']['CarParameterIdx'];
				/** @description Page number (pagination).
				 *     Page number value must be greater than 0. Can output 25 cars on page */
				page?: number;
			};
			header?: {
				/** @description Language of return data */
				'Accept-Language'?: components['parameters']['AcceptLanguage'];
			};
			path: {
				/** @description Catalog id */
				catalogId: string;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description OK */
			200: {
				headers: {
					'X-Total-Count'?: string;
					'X-Request-Id'?: string;
				};
				content: {
					'application/json': components['schemas']['Car2'][];
				};
			};
			400: components['responses']['badRequest'];
			403: components['responses']['accessDeny'];
		};
	};
	getCarsById2: {
		parameters: {
			query?: {
				/** @description criteria */
				criteria?: string;
			};
			header?: {
				/** @description Language of return data */
				'Accept-Language'?: components['parameters']['AcceptLanguage'];
			};
			path: {
				/** @description Catalog id */
				catalogId: string;
				/** @description Car id */
				carId: string;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description OK */
			200: {
				headers: {
					'X-Request-Id'?: string;
				};
				content: {
					'application/json': components['schemas']['Car2'];
				};
			};
			400: components['responses']['badRequest'];
			403: components['responses']['accessDeny'];
		};
	};
	getCarsParameters: {
		parameters: {
			query: {
				/** @description Model id */
				modelId: string;
				/**
				 * @description Filter parameters by idx
				 * @example 5651b9c4e2f55b54efe465354b3491e7,59e742688f05ca5ecc71a35cc2ff31c5
				 */
				parameter?: components['schemas']['CarParameterIdx'];
			};
			header?: {
				/** @description Language of return data */
				'Accept-Language'?: components['parameters']['AcceptLanguage'];
			};
			path: {
				/** @description Catalog id */
				catalogId: string;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Filter */
			200: {
				headers: {
					/** @description Cars count filtered by parameters */
					'X-Cars-Count'?: string;
					'X-Request-Id'?: string;
				};
				content: {
					'application/json': components['schemas']['CarParameterInfo'][];
				};
			};
			400: components['responses']['badRequest'];
			422: components['responses']['parameterMissing'];
		};
	};
	getGroups: {
		parameters: {
			query: {
				carId: string;
				/** @description Group id */
				groupId?: string;
				/** @description Filters outcoming groups depending on criteria string. Criteria string can obtain from "car/info" method */
				criteria?: string;
			};
			header?: {
				/** @description Language of return data */
				'Accept-Language'?: components['parameters']['AcceptLanguage'];
			};
			path: {
				/** @description Catalog id */
				catalogId: string;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Catalog groups */
			200: {
				headers: {
					'X-Request-Id'?: string;
				};
				content: {
					'application/json': components['schemas']['Group'][];
				};
			};
			400: components['responses']['badRequest'];
			403: components['responses']['accessDeny'];
			404: components['responses']['notFound'];
		};
	};
	getCarInfo: {
		parameters: {
			query?: {
				/** @description Automatically detects type of input data and performs search of cars by VIN or FRAME number depending on input data */
				q?: string;
				/** @description List of comma-separated Catalog IDs for search by vin or frame in selected catalogs */
				catalogs?: string;
			};
			header?: {
				/** @description Language of return data */
				'Accept-Language'?: components['parameters']['AcceptLanguage'];
			};
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Ok */
			200: {
				headers: {
					'X-Request-Id'?: string;
				};
				content: {
					'application/json': components['schemas']['CarInfo'][];
				};
			};
			400: components['responses']['badRequest'];
			403: components['responses']['accessDeny'];
		};
	};
	getParts2: {
		parameters: {
			query: {
				/** @description Car id */
				carId: string;
				/** @description Group id */
				groupId: string;
				/** @description Additional criteria string */
				criteria?: string;
			};
			header?: {
				/** @description Language of return data */
				'Accept-Language'?: components['parameters']['AcceptLanguage'];
				/** @description Template for your gui url.
				 *     In template must be 2 templates separated by commas for go to group list and parts list.
				 *     If vin is not used, then you do not need to pass criteria and vin to the template. */
				'x-redirect-template'?: components['parameters']['XRedirectTemplate'];
			};
			path: {
				/** @description Catalog id */
				catalogId: string;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Parts list */
			200: {
				headers: {
					'X-Request-Id'?: string;
				};
				content: {
					'application/json': components['schemas']['Parts'];
				};
			};
			400: components['responses']['badRequest'];
			403: components['responses']['accessDeny'];
			/** @description No details found with specified parameters */
			404: {
				headers: {
					'X-Request-Id'?: string;
				};
				content: {
					'application/json': components['schemas']['Error'];
				};
			};
		};
	};
	getGroupsSuggest: {
		parameters: {
			query: {
				/**
				 * @description First letters of searching part
				 * @example bat
				 */
				q: string;
			};
			header?: {
				/** @description Language of return data */
				'Accept-Language'?: components['parameters']['AcceptLanguage'];
			};
			path: {
				/** @description Catalog id */
				catalogId: string;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Suggest list */
			200: {
				headers: {
					'X-Request-Id'?: string;
				};
				content: {
					'application/json': components['schemas']['Suggest'][];
				};
			};
			400: components['responses']['badRequest'];
			403: components['responses']['accessDeny'];
			/** @description Search string is empty */
			404: {
				headers: {
					'X-Request-Id'?: string;
				};
				content: {
					'application/json': components['schemas']['Error'];
				};
			};
		};
	};
	getGroupsBySid: {
		parameters: {
			query: {
				/**
				 * @description Search id from group suggest
				 * @example 12345
				 */
				sid: string;
				/** @description Car id */
				carId: string;
				/** @description Additional criteria string */
				criteria?: string;
				/** @description This field is the name of the part. After searching for groups by sid, we can sort the groups by text, where there may be a part with this name. */
				text?: string;
			};
			header?: {
				/** @description Language of return data */
				'Accept-Language'?: components['parameters']['AcceptLanguage'];
			};
			path: {
				/** @description Catalog id */
				catalogId: string;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Suggest list */
			200: {
				headers: {
					'X-Request-Id'?: string;
				};
				content: {
					'application/json': components['schemas']['Group'][];
				};
			};
			400: components['responses']['badRequest'];
			403: components['responses']['accessDeny'];
			/** @description Search string is empty */
			404: {
				headers: {
					'X-Request-Id'?: string;
				};
				content: {
					'application/json': components['schemas']['Error'];
				};
			};
		};
	};
	getExamplePrices: {
		parameters: {
			query: {
				code: string;
				brand: string;
			};
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			200: {
				headers: {
					'X-Request-Id'?: string;
				};
				content: {
					'application/json': components['schemas']['ExamplePricesResponse'][];
				};
			};
			/** @description Any error 400 - 500 */
			default: {
				headers: {
					'X-Request-Id'?: string;
				};
				content: {
					'application/json': components['schemas']['Error'];
				};
			};
		};
	};
	'Get groups tree': {
		parameters: {
			query?: {
				carId?: string;
				criteria?: string;
				/** @description A flag that determines whether the general unfiltered group tree should be retrieved from the cache or filtered tree with increased latency should be retrieved. */
				cached?: boolean;
			};
			header?: never;
			path: {
				catalogId: string;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			200: {
				headers: {
					'X-Request-Id'?: string;
				};
				content: {
					'application/json': components['schemas']['GroupsTreeResponse'][];
				};
			};
			/** @description Any error 400 - 500 */
			default: {
				headers: {
					'X-Request-Id'?: string;
				};
				content: {
					'application/json': components['schemas']['Error'];
				};
			};
		};
	};
	'Get schemas': {
		parameters: {
			query: {
				carId: string;
				/** @description Id for filter schemas by branch id. Branch id it is group id. */
				branchId?: string;
				criteria?: string;
				/** @description The page number. One response can contain a maximum of 24 elements. */
				page?: number;
				/**
				 * @description Part name ids for filter schemas
				 * @example 56,85
				 */
				partNameIds?: string;
				/**
				 * @description Part name for filter schemas
				 * @example Air filter
				 */
				partName?: string;
			};
			header?: never;
			path: {
				catalogId: string;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			200: {
				headers: {
					/** @description The total number of items available for extraction. */
					'X-Total-Count'?: string;
					'X-Request-Id'?: string;
				};
				content: {
					'application/json': components['schemas']['SchemasResponse'];
				};
			};
			/** @description Any error 400 - 500 */
			default: {
				headers: {
					'X-Request-Id'?: string;
				};
				content: {
					'application/json': components['schemas']['Error'];
				};
			};
		};
	};
}
