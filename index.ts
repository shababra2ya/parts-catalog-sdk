import { Client as ClientType } from 'openapi-fetch';
import type { paths } from './index.d'; // generated by openapi-typescript
import fetch from 'node-fetch';
import { HttpsProxyAgent } from 'https-proxy-agent';


const proxyAgent = new HttpsProxyAgent('http://proxy.example.com:8080'); // Replace with your proxy URL

type Client = ClientType<paths>;

const basePath = 'https://api.parts-catalogs.com/v1';

type FetchParams = {
	params?: {
		path?: Record<string, string>;
		query?: Record<string, string | string[]>;
	};
};

const partsCatalogClient: { GET: Client['GET'] } = {
	// @ts-expect-error 🤷‍♂️🤷‍♂️🤷‍♂️

	GET: async (path: string, { params }: FetchParams = {}) => {
		if (typeof window !== 'undefined') {
			throw new Error('Cannot make requests in browser');
		}

		// Replace placeholders in the URL path
		let processedPath = path;
		if (params?.path) {
			Object.keys(params.path).forEach((key) => {
				processedPath = processedPath.replace(`{${key}}`, params.path?.[key] ?? '');
			});
		}

		// Construct query string
		const queryString = params?.query
			? '?' +
			new URLSearchParams(
				Object.entries(params.query).flatMap(([key, value]) =>
					Array.isArray(value) ? value.map((v) => [key, v]) : [[key, value]]
				)
			).toString()
			: '';

		let response: Response | undefined;
		let data: unknown;
		let error: unknown;

		try {
			// @ts-expect-error 🤷‍♂️🤷‍♂️🤷‍♂️
			response = await fetch(basePath + processedPath + queryString, {
				agent: proxyAgent || '',
				headers: {
					Authorization: 'your-parts-catalog-api-key', // Replace with your API key
					'Content-Type': 'application/json'
				}
			});

			const json = await response?.json();

			if (json?.errorCode) {
				error = json;
			} else {
				data = json;
			}
		} catch (err) {
			error = err;
		}

		const headerData = new Proxy(
			{},
			{
				get(target, prop) {
					if (typeof prop !== 'string' || !/^[\w-]+$/.test(prop)) {
						return undefined;
					}

					return data ? (response?.headers.get(prop as string) ?? undefined) : undefined;
				}
			}
		);

		// Return plain JSON-serializable object
		return { response, error, data, headerData };
	}
};

const client = async () => partsCatalogClient;

export { client as partsCatalogClient };
